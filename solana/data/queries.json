{"all_tps_info__2022-01-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a064c90b5d4d1938482eb8098fd25aa6"}, "all_tps_info__2022-01-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a05d2a5fc07f99a49dcbe34841e32cf2"}, "all_tps_info__2022-01-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2de8b3bbb47c604ea14a39f817597ca2"}, "all_tps_info__2022-01-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0800aeffaeeee5510b326789e52b9368"}, "all_tps_info__2022-01-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c9e231219e148f980d47898db72fff7"}, "all_tps_info__2022-01-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-739f46e6be4e91b911188a1ad11468dc"}, "all_tps_info__2022-01-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-35c32d420f1028dddabe55791618cf81"}, "all_tps_info__2022-01-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e10641f8b16063517ac9c17cd5705a6f"}, "all_tps_info__2022-01-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5dccf44297c4b56b8b4067f37beb30ff"}, "all_tps_info__2022-01-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cdeb438e637aade9c788e802676634d2"}, "all_tps_info__2022-01-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-42e3bb851e772328c340440fcca10052"}, "all_tps_info__2022-01-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-82520a7bcac9de0712eb1cf802e4409e"}, "all_tps_info__2022-01-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d0ccef99a4f5c2c2366be4cc90f20e3f"}, "all_tps_info__2022-01-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2ad2a90bfa2396f1d23ef96d4b3e231e"}, "all_tps_info__2022-01-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3a937a8ec4dcd3600c6572d76eb60cf1"}, "all_tps_info__2022-01-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e1e8616cabcd7149da989886652cc72f"}, "all_tps_info__2022-01-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-044f5094d943ca91d7464be730b46c3d"}, "all_tps_info__2022-01-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a0cf847d4d772a9637da4f465b366743"}, "all_tps_info__2022-01-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-621e170891f71c0d55873061032e9e72"}, "all_tps_info__2022-01-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-73e48ec8be3aaed12b460f3151834313"}, "all_tps_info__2022-01-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a0bdfc7a8f75dd4328b7b317e771ccc0"}, "all_tps_info__2022-01-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b936af8f5a8198e01b2f5497a13394f5"}, "all_tps_info__2022-01-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e6e703c67b7f88f3f1c0ae60036f6381"}, "all_tps_info__2022-01-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-84ba6cf7aae08c508f5c3a547f7c72a0"}, "all_tps_info__2022-01-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-dabc962def44f951cda1f7bae47863cb"}, "all_tps_info__2022-01-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-aed7149460438c9ec964e6fb642fd080"}, "all_tps_info__2022-01-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-acb03e7cf8c131a2cad8ab8ed3bbf5a3"}, "all_tps_info__2022-01-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4cdfe948bc3b9b7cc17ee49a01dfd437"}, "all_tps_info__2022-01-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-651aef4ef20b6ddcf5e86a1fd61092c3"}, "all_tps_info__2022-01-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-607347b37e3400fdd4e7d0497e276c78"}, "all_tps_info__2022-01-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d46f92c3bc565557c986b57e11764ee4"}, "all_tps_info__2022-02-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e9432497e9c58351d350fdf420c30ac0"}, "all_tps_info__2022-02-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b165561a280ef1f5481d50091d52b417"}, "all_tps_info__2022-02-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8f97ae0ff9d5066414df572b42980390"}, "all_tps_info__2022-02-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-55fab783abce86c6ffa71c544de9a227"}, "all_tps_info__2022-02-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-da174e6d84a154915ab5281ff5c38f86"}, "all_tps_info__2022-02-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5d01e46b0e9d94f65e2fdc861c8088b1"}, "all_tps_info__2022-02-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2e6923f3d357b45cbad21a9dc6943f25"}, "all_tps_info__2022-02-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-03ffce927654f782a6a27ffa21ea29b0"}, "all_tps_info__2022-02-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-55c5492bf59cbb9a2e7eb1ae9be444b0"}, "all_tps_info__2022-02-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a2f6773b39d8fb2c1e499574f4e3503e"}, "all_tps_info__2022-02-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-aeb1338731e76cba84d54b62efd90693"}, "all_tps_info__2022-02-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ceb44d2c2e4003129f0a8f2054b3d6ca"}, "all_tps_info__2022-02-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3beff38a8897178a1f382e6f6fe4b921"}, "all_tps_info__2022-02-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0050dc3856c977560053f62b649f2d5a"}, "all_tps_info__2022-02-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ad618ae0a9a3c17655ed793eec3375e2"}, "all_tps_info__2022-02-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ca31d3db2fa2051db9f4451500823799"}, "all_tps_info__2022-02-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fd41e3a48da46dea1ae05c341c700ef3"}, "all_tps_info__2022-02-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9cb59fe70745bf1660a8b8fe8969252a"}, "all_tps_info__2022-02-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-229020c67b86af65fb26ea511fb0c2c6"}, "all_tps_info__2022-02-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-03c48394e73fc3d4febd391c878ab3d6"}, "all_tps_info__2022-02-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-498e1954a86f2ade99f4dc73c3929f06"}, "all_tps_info__2022-02-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7ae585a5afd692a96b3f9d48c4de2563"}, "all_tps_info__2022-02-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-172da5de3e570e64889e6dde217e6b32"}, "all_tps_info__2022-02-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b70890d142823db0285ed5b52d6a2d98"}, "all_tps_info__2022-02-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e74763922d6fc0881eaa5bc09e360303"}, "all_tps_info__2022-02-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5903a8e0948b13ca2daa9c8144ac3569"}, "all_tps_info__2022-02-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-85e2b99b11857aed0319943bd30c26cb"}, "all_tps_info__2022-02-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d2528d2276901aa129c3e14bf91ddd7e"}, "all_tps_info__2022-03-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d09bc46334201dd232750dd9267bbe5d"}, "all_tps_info__2022-03-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6069a68fa3fd9e41d4123471e2907c02"}, "all_tps_info__2022-03-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bb744e99b834672c496651b0028e579d"}, "all_tps_info__2022-03-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-77c76a37e858a7d0e77ed989e7cf45ce"}, "all_tps_info__2022-03-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1ada2504a649cf716466ec3c945a3d7f"}, "all_tps_info__2022-03-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4a8c77c190a74e3c76ac66f7efb5981d"}, "all_tps_info__2022-03-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-59c83416746448d18dac4ccce49e028e"}, "all_tps_info__2022-03-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-42cf17398f7d8cbd528abc140ca4814d"}, "all_tps_info__2022-03-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2999c7bdd8c2fb76e5131704cf7ba4a7"}, "all_tps_info__2022-03-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-645c65677bf56fcff6575d6c073073b3"}, "all_tps_info__2022-03-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c1ec5c6e98ffd632879d336a1aec9106"}, "all_tps_info__2022-03-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7ebe9eb5514835218cb7361407dc7806"}, "all_tps_info__2022-03-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cf7397d61df7f2f0e29ed2fc246bd90e"}, "all_tps_info__2022-03-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9f7f5c13cfef390cbdb2fe70c5162173"}, "all_tps_info__2022-03-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f00c35fec7b19429a11002cd34aadb74"}, "all_tps_info__2022-03-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1e46d71597fc8776a6bda9a8942e124b"}, "all_tps_info__2022-03-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-897fc25cbc09d1564967ddeed1b07ce5"}, "all_tps_info__2022-03-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2bdc7fe573b949ea290a722032f4f95f"}, "all_tps_info__2022-03-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-165defaa1eac3389896d1e03471751bb"}, "all_tps_info__2022-03-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-74688ccb936bb72ea52472740ba77410"}, "all_tps_info__2022-03-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-db014527d582727b28505fe26eca0aaa"}, "all_tps_info__2022-03-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d3205db6973b5fa202af0dd7009f386d"}, "all_tps_info__2022-03-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5fd070c629e159800afe5860dacdd794"}, "all_tps_info__2022-03-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6fac26939f77a27b2b9c3f4e2739bfe8"}, "all_tps_info__2022-03-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-abc057b29ba6d45df5679b43ea5404b0"}, "all_tps_info__2022-03-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d5648fa2416fee4d98d9af733d9821f1"}, "all_tps_info__2022-03-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5a43f044dffe8329c85bda0c24ede7a5"}, "all_tps_info__2022-03-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bde1ccd117d84f966c5ba35f58699d54"}, "all_tps_info__2022-03-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2116252501c312d354a82349a5bcde04"}, "all_tps_info__2022-03-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6a0db2aea92e34cc878ba50386a840ca"}, "all_tps_info__2022-03-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1fce736df0c6a8841714a300e3dc08d1"}, "all_tps_info__2022-04-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e7b13f73d6aaa445df9ad643a47c75ea"}, "all_tps_info__2022-04-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9733b7a3971f607769d3d9750b51fbb0"}, "all_tps_info__2022-04-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-adc99a3e63b15a3761c4778addbcd805"}, "all_tps_info__2022-04-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6064cafc63ae342180ae56bd73e25e0d"}, "all_tps_info__2022-04-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5e9e406440f11e73a6eb36a38595dcd6"}, "all_tps_info__2022-04-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-514e0ec5f305a88d960ba42380433dc7"}, "all_tps_info__2022-04-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bf6f4eb378962d3997682b84d6834b6b"}, "all_tps_info__2022-04-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0a185c1812284ac6a8cf7947366619b6"}, "all_tps_info__2022-04-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2fde5caa771f35acf5e750d2208eb6fc"}, "all_tps_info__2022-04-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ea5d986fe3b2a913f01b855ad421f09d"}, "all_tps_info__2022-04-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c40a03cca99fd3e553ff85fb96e5751a"}, "all_tps_info__2022-04-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-de295916363f8df7b9d983356fad8753"}, "all_tps_info__2022-04-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fc1aa77c09e06dc27924d71690a2cae9"}, "all_tps_info__2022-04-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-32ae7fead81a4503be252ccc04fce26d"}, "all_tps_info__2022-04-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d13d3d8105cea508e3da6e9574fc1a44"}, "all_tps_info__2022-04-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6dfaafac7364edfab9882deb32c5db39"}, "all_tps_info__2022-04-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bfd02df5418fb721de122c0bb523d863"}, "all_tps_info__2022-04-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-81bedd036920f03a01c645b378792edd"}, "all_tps_info__2022-04-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0457263b22ff598991716d45064336c9"}, "all_tps_info__2022-04-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-abccc0291f688c4757a35b699a117000"}, "all_tps_info__2022-04-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a03734607c50f53a5b8b467e85a5bdfd"}, "all_tps_info__2022-04-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c4e918d14756a8bace8ec44cb8692d02"}, "all_tps_info__2022-04-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ed80d6db1bf2c4c808fa7e0d8cf4fff9"}, "all_tps_info__2022-04-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0b9d35a4f907575e912decfb2d5b696a"}, "all_tps_info__2022-04-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b13ffba84b7ba47562d2bd8f12146903"}, "all_tps_info__2022-04-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0673d77742cef7aa7a1bd64edf403c64"}, "all_tps_info__2022-04-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6c5a26b6574ab247bbb5520bd18e258e"}, "all_tps_info__2022-04-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c3a541af72fa0ffc5d765dd150f646c4"}, "all_tps_info__2022-04-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fc4ec2473a876680f28e8be779d26a58"}, "all_tps_info__2022-04-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9d76f87e121cb21f87aeb8052cd15503"}, "all_tps_info__2022-05-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-68cad56a5d2760dd379392b53bbc6b98"}, "all_tps_info__2022-05-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f5fd1e645ef9e1389fdc7284965aebd8"}, "all_tps_info__2022-05-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ed137a84d7e8cfcb0e9b4751d04137c2"}, "all_tps_info__2022-05-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0fba2d66bd9d01b973da7177e6e8b95c"}, "all_tps_info__2022-05-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3dc6db755c6c2aca57549fb3a515a291"}, "all_tps_info__2022-05-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-af16fbd03205e9c7dceed81bd1c66af5"}, "all_tps_info__2022-05-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-47d77bdaa8d37220219cae8a79895b32"}, "all_tps_info__2022-05-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a473358dd9354d282ca4af2bacd6c8f5"}, "all_tps_info__2022-05-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c92e21a78137c71e5fadea62800b1b03"}, "all_tps_info__2022-05-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-62bce71aa3bdaba5cc70aec1431fcd4b"}, "all_tps_info__2022-05-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f4c78290ba828d63aaa56f476aef41f1"}, "all_tps_info__2022-05-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2a9a5afea3753e82574559c93cbdeb23"}, "all_tps_info__2022-05-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a4fd9e970e247197ae316da2fdea23aa"}, "all_tps_info__2022-05-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c5d8fb9c319280c2ac1b24eba30fd511"}, "all_tps_info__2022-05-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-da4fc19e2ae546606a677c57dc6d0430"}, "all_tps_info__2022-05-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1b45a8e870b926d7fe4fc72963e6a7b7"}, "all_tps_info__2022-05-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9067dccb150dfd1225bf1edf386a2a4e"}, "all_tps_info__2022-05-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-25a4e05a8d797cafe64bcb3c43d9abf8"}, "all_tps_info__2022-05-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e471252e727234fb7f4f28c7b2ff053c"}, "all_tps_info__2022-05-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6c73a6c66dc943dd6978876ad83a1b5d"}, "all_tps_info__2022-05-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-39863eba977ed6b3086dce698563fef2"}, "all_tps_info__2022-05-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1d61387bac604ecfb1c9c40ea3989f5d"}, "all_tps_info__2022-05-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e32dbdcdc6f5eb3bd9ce2b40952b147e"}, "all_tps_info__2022-05-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e907fe3ce4586b2aea65b84616eb2a66"}, "all_tps_info__2022-05-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a6e6f8b2d2f837918d83d9ccd980238c"}, "all_tps_info__2022-05-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-096b5a460e835bf81363677a8897872a"}, "all_tps_info__2022-05-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9c62d14114ddfba35da88b2340c101a1"}, "all_tps_info__2022-05-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ef2ba16bb6eca27145822a3a70ab6254"}, "all_tps_info__2022-05-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7171d5b25688060081c7ae1699d40874"}, "all_tps_info__2022-05-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4b8ca574076a714c7454afceea083cc5"}, "all_tps_info__2022-05-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4ad01e98cec8fe0343cd7ea90bda6a4e"}, "all_tps_info__2022-06-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fcba4408669c2332a507cda89484fe53"}, "all_tps_info__2022-06-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0fd8a8970d799b1680a12d3ee98a030a"}, "all_tps_info__2022-06-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-76c98663492db3f50d0fba2f52340ed1"}, "all_tps_info__2022-06-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2c3a4cee06a0944fec1ffb90aa5d6041"}, "all_tps_info__2022-06-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ec09516f3e5e5938540abdd3c74f3f55"}, "all_tps_info__2022-06-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-97daf1e59713eec149ada02abbb1bfe5"}, "all_tps_info__2022-06-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c34a3b110ff52a70ae9e84c95d0c0cd3"}, "all_tps_info__2022-06-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6e4bc124257864f78b1afaad1e8c7519"}, "all_tps_info__2022-06-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9c6a34898b4066afe3198e2e72b9a2a7"}, "all_tps_info__2022-06-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-260ad61ae6ab5c2f26495908e99e8958"}, "all_tps_info__2022-06-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-eb6923c9346bc8b986356e82f8a5ffcd"}, "all_tps_info__2022-06-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f0c8ddd00fc1066415b591741ff5f8e2"}, "all_tps_info__2022-06-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-91617f60e2685474a8e024507f013501"}, "all_tps_info__2022-06-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d26a064082c4f40a99eff1501f72c6a1"}, "all_tps_info__2022-06-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1aa8ac8bca3c00dcbe2cbf09d785eb32"}, "all_tps_info__2022-06-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c48ef24550b5876e165c6cb99bf1b6a6"}, "all_tps_info__2022-06-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e03a2c1e8b3a70682ab56af7c508dbee"}, "all_tps_info__2022-06-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7ab9adb5b6fec2bcd24184040a219af1"}, "all_tps_info__2022-06-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c2b9971f8d7ecfb2e4d2d369163ca2e3"}, "all_tps_info__2022-06-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-76c1972387a160055a0ae4d389fc0158"}, "all_tps_info__2022-06-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a4547acbcb186a8fc56c637078f3e8d1"}, "all_tps_info__2022-06-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-68d2371657730fa51b1fcf0415607b64"}, "all_tps_info__2022-06-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5671bb3ea095a5a00e487b53212bba2f"}, "all_tps_info__2022-06-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-542f3724e7c0cb0854795330394fd8a4"}, "all_tps_info__2022-06-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a0aa12c8dc93c8abc41fccc7b1c7fb2b"}, "all_tps_info__2022-06-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0f2a00703d21febd47a24c35453f0749"}, "all_tps_info__2022-06-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-06f6c96404b6728fcdaed4308e9e449f"}, "all_tps_info__2022-06-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c7d6cf6aa5506046d48f702eabff075e"}, "all_tps_info__2022-06-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bc98f002053cc2e61c11d067eccf3e74"}, "all_tps_info__2022-06-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fb39ec4f2a9d057354ef845bed8e7cd8"}, "all_tps_info__2022-07-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-016acec538ad810fd9134bd701925911"}, "all_tps_info__2022-07-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ef4ac6663fb23e41c769a9f36118e706"}, "all_tps_info__2022-07-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4058576d94fd1fc16ebba06920764d71"}, "all_tps_info__2022-07-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-eb319c47097c8e7831bef64202b8bb67"}, "all_tps_info__2022-07-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e3b6b847fb148cb65ec65747def74058"}, "all_tps_info__2022-07-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-25b8eea7d5f0e9b0de81e8f8cd8daf29"}, "all_tps_info__2022-07-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3ca9dea4a570fd8ed7e2a62de2d04a6b"}, "all_tps_info__2022-07-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-aebbd4a8bb0132c4d90e6bd3dd9299dd"}, "all_tps_info__2022-07-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-87459f10a5ade3dd1783ba23a3c0a7bf"}, "all_tps_info__2022-07-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e5d5f99dd7d5d2d561681e9d77f13df8"}, "all_tps_info__2022-07-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cf2c1cd5f74217144f2705ed4a2410be"}, "all_tps_info__2022-07-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0921227f14c6eadd7df9a0da6cd0ba15"}, "all_tps_info__2022-07-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-be038293cdf5aa992f28a6013bac3b36"}, "all_tps_info__2022-07-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f71db9267234639ccd54d2a72fcad281"}, "all_tps_info__2022-07-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f41a423cc57a845c09a21cbcea38be25"}, "all_tps_info__2022-07-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c6a99f536dd4efbb01f94d5bc7572ceb"}, "all_tps_info__2022-07-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0d28961ad09335e2e9b78d939d77d52e"}, "all_tps_info__2022-07-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0b01bec18b525aa0d592be5d559fc493"}, "all_tps_info__2022-07-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1ea978a7a09ee7b9326c4ce917bc0f0b"}, "all_tps_info__2022-07-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d6fbc96675a7b127b773e7b43c8f2b1f"}, "all_tps_info__2022-07-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-df8aa8a9550ee010f3e0eb88461e4a08"}, "all_tps_info__2022-07-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-011ac5a0ebe3a42240672085bac0c82c"}, "all_tps_info__2022-07-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f457b7990be44c8b2b4b66866b781e05"}, "all_tps_info__2022-07-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2b707767f22361dd09b156218a44b59f"}, "all_tps_info__2022-07-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-22f9c0f8abfe8ea4d60423e458b8fcae"}, "all_tps_info__2022-07-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-776be726e6c0c4b5cb8a3bf935b38506"}, "all_tps_info__2022-07-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e76cc856071c2769d823a7d7fa7f3685"}, "all_tps_info__2022-07-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a701abd5e5abe7084745c6f62b0400db"}, "all_tps_info__2022-07-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a72d39b435272ed2324873932021fcde"}, "all_tps_info__2022-07-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c2c9c19f5b533f1fd04d0bf160a9c96"}, "all_tps_info__2022-07-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bcceeb57aa20ae1d19fd46ffaaa33a00"}, "all_tps_info__2022-08-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-01c3857c93067f77d5991bb438c0f721"}, "all_tps_info__2022-08-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1cbc775aead3d60f240234f8b1a6ecc2"}, "all_tps_info__2022-08-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a1b71c715b137634988be4e04358d18c"}, "all_tps_info__2022-08-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4c68e0ea712c5124b485933c7639f47a"}, "all_tps_info__2022-08-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2042006edfc53b8f119a3175252961de"}, "all_tps_info__2022-08-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ecb33a8880a3fff5927c8c5831a9cbae"}, "all_tps_info__2022-08-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fa0fc19a527860d8b8b42ce721630753"}, "all_tps_info__2022-08-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6ecc15bc0110616a6092388ddf6cb0b5"}, "all_tps_info__2022-08-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-07ca03f409b2fbc46e71bcb7a7fac93b"}, "all_tps_info__2022-08-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3c05061702a42d317315e1288882f242"}, "all_tps_info__2022-08-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-aa1d73e07fa134c122a7b22f2ba6517c"}, "all_tps_info__2022-08-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e1b7d7466863793232b6ab9dd913be03"}, "all_tps_info__2022-08-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-946f544f2e086ffd54fdfc33b67f279e"}, "all_tps_info__2022-08-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0a7576688aef765ece90e46c2cc5a75e"}, "all_tps_info__2022-08-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3003b3afe1d14ecc34619e5b2367e2d9"}, "all_tps_info__2022-08-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1fd02e0b37ff0e13919d9a552d1f5905"}, "all_tps_info__2022-08-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-de3f91c1ea74d232f848b0c5056d0237"}, "all_tps_info__2022-08-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-82c4df0249b37ddf65cd0a16c7f8b1fa"}, "all_tps_info__2022-08-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-87691ac69b2daaed5739d422d30b6d3e"}, "all_tps_info__2022-08-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1698034562cbad52da8e96d63c2c86ba"}, "all_tps_info__2022-08-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-76567692c943d530171b78e418cf7eb7"}, "all_tps_info__2022-08-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8fc5f46d42049c78a8d2ba047a564cf4"}, "all_tps_info__2022-08-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2b1fbaa31a0fecb02f4f7bfa0f79087e"}, "all_tps_info__2022-08-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6bf9f65df2b6305f2357e446d60ea110"}, "all_tps_info__2022-08-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d15ccb6d4513d9f8d023b4da487a0d48"}, "all_tps_info__2022-08-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-92d3d07fb095968452cb5b1acf45ac17"}, "all_tps_info__2022-08-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ac6c25eb3ac1f51c0da18f3d0112ae02"}, "all_tps_info__2022-08-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-847d7169be025bb53992de83a92c32aa"}, "all_tps_info__2022-08-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a617a975be78f5a4aba70265ca90563c"}, "all_tps_info__2022-08-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-016275f3cc4b96cf6ada966d98d39b28"}, "all_tps_info__2022-08-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-08-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-797dbe05d44ec7bc846e4a336e868c39"}, "all_tps_info__2022-09-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f193e90881038563c03fd383fa821cd6"}, "all_tps_info__2022-09-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-90b8990d1962ffff22bd73e050de6062"}, "all_tps_info__2022-09-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-aee432e35d495d08e3a29bccfc28263f"}, "all_tps_info__2022-09-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-03c1bf50d79865e312992101da151b50"}, "all_tps_info__2022-09-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-015bf4801f2d8ce6c05e8b414d9ee0e8"}, "all_tps_info__2022-09-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1a2f7b6db45f18f09979484777e1ebc9"}, "all_tps_info__2022-09-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0935709680266df9f441af5fe2e1b45e"}, "all_tps_info__2022-09-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-889e6e605c40c4cd08f57b9532f300a2"}, "all_tps_info__2022-09-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d6f048ba27e704fb422d00fae72cd2da"}, "all_tps_info__2022-09-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8217c50bf0d31017ce6184470a117cbf"}, "all_tps_info__2022-09-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-509138691e4f99ea863dea61bbeed6b3"}, "all_tps_info__2022-09-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-26168e8939e91321bb2de35262f02111"}, "all_tps_info__2022-09-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-28bbf1baf87433b021ea6ec31b58ab30"}, "all_tps_info__2022-09-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e791c6968249c5dc7450dabb86968601"}, "all_tps_info__2022-09-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c3ecda3a055efedabaa342eec5bc9c0"}, "all_tps_info__2022-09-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5a0095e86a3117c02da2bbc6624253e3"}, "all_tps_info__2022-09-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5f280bf4b9868d92671b1583caebe742"}, "all_tps_info__2022-09-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ea291a54120b04841945e5b5031f66a7"}, "all_tps_info__2022-09-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-32ec86e01bb312e156a3b0643533ddb3"}, "all_tps_info__2022-09-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-58c6c2a5aeb2b48c01b6d2f3de0f8794"}, "all_tps_info__2022-09-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e508ed4cd8bd4576c1100f28b8988c32"}, "all_tps_info__2022-09-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-620c183bcc676dba573de3bff283d6c5"}, "all_tps_info__2022-09-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8e4f807b235baf7c02042ffc7cb2113c"}, "all_tps_info__2022-09-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0dea9e3ca66c070af06560c8094423c3"}, "all_tps_info__2022-09-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9456583098b28f555ea33215ee779818"}, "all_tps_info__2022-09-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-447ca1a2c3439a1940a4bd12b4090731"}, "all_tps_info__2022-09-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f6bd4c83ef117bbbae6700885f00c1fd"}, "all_tps_info__2022-09-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3d4ea3e1b4adaaae45d6e561312ac03a"}, "all_tps_info__2022-09-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-09-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as total_avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ec0a6fd7ac81c6cf5764634cd09b7f78"}}