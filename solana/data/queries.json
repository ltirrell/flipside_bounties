{"all_tps_info__2022-01-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1f4ab7298fa9b4841fd6d59d465eadae"}, "all_tps_info__2022-01-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fb256f9967758300d76cd2eb30fa9e0c"}, "all_tps_info__2022-01-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-60d0a810771c9725d3cb468ebbb32a41"}, "all_tps_info__2022-01-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-043d6673cde5bf6103779aa519474d33"}, "all_tps_info__2022-01-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2d4769a42980dc3f811307f8027590ee"}, "all_tps_info__2022-01-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-80ac5016c26ad5f99e9432495e8ccc2e"}, "all_tps_info__2022-01-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cf1b9d7840e5261dc970ce459a5f37b6"}, "all_tps_info__2022-01-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-554631711768520e218b7ee33c8e9a18"}, "all_tps_info__2022-01-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a1191af0788803301ece502bea023f5a"}, "all_tps_info__2022-01-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-eed3f2acdc2d71a10107b1ffc0919ef4"}, "all_tps_info__2022-01-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-763b08928db08805e92355030a842066"}, "all_tps_info__2022-01-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8f2a6bb13d07a5ce0353ce36213c8901"}, "all_tps_info__2022-01-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6aca9148068255161b28b53e0ec85a90"}, "all_tps_info__2022-01-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e019da4212cb78dd9b03929d61b566bc"}, "all_tps_info__2022-01-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7ced304f2ae7a892daa9eb4bbc009195"}, "all_tps_info__2022-01-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cc464a642cad94892dbc2d4bbfe3b680"}, "all_tps_info__2022-01-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-326a1ee65e46c359b3369bfbb0601cdb"}, "all_tps_info__2022-01-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8593d0b8163be423d9e37e7bea075b16"}, "all_tps_info__2022-01-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2db1701f23d9c8f01c28e99c8f42ff63"}, "all_tps_info__2022-01-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c2818ea35030ec5ae6364a186d6e43dd"}, "all_tps_info__2022-01-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-53e02272901cb933e0d1154cb7ccf327"}, "all_tps_info__2022-01-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-beda3edc9cdcc6d6913579b9fb8f3851"}, "all_tps_info__2022-01-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7a671d2d58c584dc8c0ff6f9d044069a"}, "all_tps_info__2022-01-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fcbfe586be7909efd6db13e00a2332db"}, "all_tps_info__2022-01-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bd0bee408417b18e76c78b6dba78e7fe"}, "all_tps_info__2022-01-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-136800f8a02c1ccecd1848344488e284"}, "all_tps_info__2022-01-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f101f67cfdc480e23581e6c77cc041fb"}, "all_tps_info__2022-01-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5b77bace459c1043f8a38872fc9fa7d1"}, "all_tps_info__2022-01-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4c3bd6744a126dc190e6b1c8ff2c027b"}, "all_tps_info__2022-01-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c87b827cab34b0d1020a33b2fcae2fc"}, "all_tps_info__2022-01-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-01-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ef4ab94525f2bd00981fc737cd38ece4"}, "all_tps_info__2022-02-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-145c3f83264b5396b332d354456de5e9"}, "all_tps_info__2022-02-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-663c81f3ebd6471fbd08be42c7984cc4"}, "all_tps_info__2022-02-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5a2b5189f5c03dbfc7f9d80c26ff2ed7"}, "all_tps_info__2022-02-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-dd96e7e26a1a5a0b59afc513dab0b03b"}, "all_tps_info__2022-02-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5e6b164af8601e469878b208352210b4"}, "all_tps_info__2022-02-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c62f727006897641b5ad26ef3c7789b4"}, "all_tps_info__2022-02-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-642b1627335866bd5cf040a37fedadb1"}, "all_tps_info__2022-02-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-24896fd17181e40224ee58ab9c649757"}, "all_tps_info__2022-02-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4628f748ddc8f958a44b92d0a8cb0749"}, "all_tps_info__2022-02-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-791d17ba9b4f8f1cf30b1aa7348f1a78"}, "all_tps_info__2022-02-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-24c691920b412d30a1bda7ebdbb4047a"}, "all_tps_info__2022-02-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3eb912dbf80514715115ce135ff077c9"}, "all_tps_info__2022-02-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3a4707dc42bf763e6a8425f27afce05f"}, "all_tps_info__2022-02-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8beffd5456e9fb4930dd50dd0a9dda8d"}, "all_tps_info__2022-02-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d183e2a619b80eb3534c48f429442bd5"}, "all_tps_info__2022-02-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d5b66e2bdffbb05ed374bfaaa5425272"}, "all_tps_info__2022-02-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5911239ac6a91cbffcaec7adc67a1780"}, "all_tps_info__2022-02-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0d9bcb3570435f99ba3c76a41ee92a66"}, "all_tps_info__2022-02-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-41ab4c03fbb4baa8003e32e07ef0d821"}, "all_tps_info__2022-02-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1096ce3178a2f7eaee9c3eebb72bd27c"}, "all_tps_info__2022-02-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-36cf333988197f733d2e7cfe35494b63"}, "all_tps_info__2022-02-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8a1e2f7070a42d3973ae67912983df66"}, "all_tps_info__2022-02-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c48f300ae005f94c08b4ec0aca9ad338"}, "all_tps_info__2022-02-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bf3fc2e75cd7d4b7d540a0e2ee9d4888"}, "all_tps_info__2022-02-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-15d6683cc7377dba524ce7f3456bae6b"}, "all_tps_info__2022-02-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4d10d22736db3787eb31b45fa6340f1e"}, "all_tps_info__2022-02-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1467a82ef22988cffd9d9a934b91eec1"}, "all_tps_info__2022-02-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-02-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a0af4c75c4ef5b3e192853b0e3e2aede"}, "all_tps_info__2022-03-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-02275f09f38a2b323a7a17a26b016700"}, "all_tps_info__2022-03-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f264f83ee8b07734228895b6a1661760"}, "all_tps_info__2022-03-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-fdb98d09578467781c88b6700db39bfa"}, "all_tps_info__2022-03-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-825e58a0c23f8509e4f313616692478b"}, "all_tps_info__2022-03-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-716bd668c1a3d82014e0ceef82eb5325"}, "all_tps_info__2022-03-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-acc33931735e896c9349295f0d3bc287"}, "all_tps_info__2022-03-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b5f757c10ffd0b1bd9107f3d8143f689"}, "all_tps_info__2022-03-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1aa861406a0cf017543fd7f92e5c779d"}, "all_tps_info__2022-03-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1e11bff7d1e1982f2e66d90743ebfe22"}, "all_tps_info__2022-03-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9a88fae2d0fed25053901fc0111c9ea6"}, "all_tps_info__2022-03-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6b9d5aa990c4f0be4fbabe9f9b3cc7d8"}, "all_tps_info__2022-03-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-586dc0d829f38611b297cf7735fcf184"}, "all_tps_info__2022-03-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d468a96ef65b3a4138736318b94c84e7"}, "all_tps_info__2022-03-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-82865b13193e33ca8403a83c39f3be89"}, "all_tps_info__2022-03-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-61d99f320645d3d4c4c446d6dca0d73c"}, "all_tps_info__2022-03-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-11cfdd8025edca3bbcd2d2dc612bbac9"}, "all_tps_info__2022-03-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-70ab769c1e8e2609b076316304b7af81"}, "all_tps_info__2022-03-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-81793df0cd78a52584e5197564ced12e"}, "all_tps_info__2022-03-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9567a9b245fc1e2ecf5733cb4a5e2989"}, "all_tps_info__2022-03-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3d432d6a8bfed554d49715d7d3eb34b9"}, "all_tps_info__2022-03-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6a0c8ba43f6e982a355cef9013e6b259"}, "all_tps_info__2022-03-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c723ea0b403251e273e0e30bf94ced06"}, "all_tps_info__2022-03-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7953fd28cae0b3649609016db93f8797"}, "all_tps_info__2022-03-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9549a3cf05f12b5a40eec00005e9d650"}, "all_tps_info__2022-03-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7fda65b6143b2cab507e36f1b5ea3543"}, "all_tps_info__2022-03-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b1ecbc7669714c23438a6564476010ab"}, "all_tps_info__2022-03-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ac08be5e3d788f41eedcbc8085bdc014"}, "all_tps_info__2022-03-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-063b2f740730e3f8f200202bba61133d"}, "all_tps_info__2022-03-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9e6c5bcbf3edc4f649dc58f3a3824718"}, "all_tps_info__2022-03-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1cd7be1cd2725b0e79a2134450952460"}, "all_tps_info__2022-03-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-03-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2b74cb1ad64a4321e869c53681cea4f1"}, "all_tps_info__2022-04-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-409343857b536ab30de443d08c7026b0"}, "all_tps_info__2022-04-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-04ba66ac38cda4ea77fd8e7572678371"}, "all_tps_info__2022-04-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3f210708d992d8508321f9a11a9f1611"}, "all_tps_info__2022-04-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9d5ed344c0a507d00286c3c32cddec7d"}, "all_tps_info__2022-04-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-91214081bb79ef4959dd8ac41e1b9d56"}, "all_tps_info__2022-04-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-80532971ca9070b82ab431fdeeee2a44"}, "all_tps_info__2022-04-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c44eeeef329308c8e10c161f8df36fef"}, "all_tps_info__2022-04-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5bb896f10408800a98a5851cd8650ed0"}, "all_tps_info__2022-04-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a6b4a9ac6d0ce68011e6b80fffca05fe"}, "all_tps_info__2022-04-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5ef7295c4c013eb2a84290417f52c7ea"}, "all_tps_info__2022-04-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d3c37f53230cc5e0d1379c16dda621a9"}, "all_tps_info__2022-04-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ca2495e2c63c04df6813c44a6e993bd6"}, "all_tps_info__2022-04-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2838bce22496aabba95e04d3f603d102"}, "all_tps_info__2022-04-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1552bd42abcb8c40eef9e30639a59ede"}, "all_tps_info__2022-04-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7e4dd12994ce765ea28324c21a8a2e56"}, "all_tps_info__2022-04-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b1fac7d70c0f85ae093960b1dba781a4"}, "all_tps_info__2022-04-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ac12cc1ac1c611ed47c6d8c8fc613b5b"}, "all_tps_info__2022-04-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-426fccf9e0f84aec8c5d49b8ca7af7a1"}, "all_tps_info__2022-04-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-faccc8c249e165239ead8c80fb94b28d"}, "all_tps_info__2022-04-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-963d638dfb6708e609b034dcc78b3cd1"}, "all_tps_info__2022-04-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0229c4927e58b2d685902d2414cbeaf1"}, "all_tps_info__2022-04-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-641872bdb5bceaba30430e84e1636265"}, "all_tps_info__2022-04-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-0f3d1cb5a5a61b90d4847f3316583d95"}, "all_tps_info__2022-04-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2c990f3a8855be496bdb85b4766d8487"}, "all_tps_info__2022-04-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-11159f316984082d0db342d642927590"}, "all_tps_info__2022-04-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c6672a9d5c244fa637398ad8892a2551"}, "all_tps_info__2022-04-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6ce265c091f1776f8b4904bda10f6a7e"}, "all_tps_info__2022-04-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-88b10ef473a2abdc549264d8ffeb474e"}, "all_tps_info__2022-04-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1f04ce3c10c57e5f9baca64e61ad0749"}, "all_tps_info__2022-04-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-04-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-91b2953cd75f94f26cc339d765574701"}, "all_tps_info__2022-05-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f0586f157c60f7699dc9aa3cf5f5aa75"}, "all_tps_info__2022-05-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-f1993218b7a623b1a3142c2f2a9ea3e4"}, "all_tps_info__2022-05-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-80261ae4e6e91702e5a08a486f68f87f"}, "all_tps_info__2022-05-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-582b45e2056fb79f1f7b0f03c5fe3b80"}, "all_tps_info__2022-05-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-553dae7fa5461ee7b09bc4117c65dc13"}, "all_tps_info__2022-05-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3c572bb6ff7fdb5f8f7e2365b21c25f0"}, "all_tps_info__2022-05-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-cb3f0676be2e56a12862344b893d9e41"}, "all_tps_info__2022-05-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a2146957c0858af2eea26a36229fcf3d"}, "all_tps_info__2022-05-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-90ba5d86a69171b04c50a75c93260d58"}, "all_tps_info__2022-05-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c0ca5b62492868edc115803eb093cbda"}, "all_tps_info__2022-05-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-26aa50000daba69b0a93378f2d7bebfb"}, "all_tps_info__2022-05-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c64145a3afcf26f4d100b2b37eafaa61"}, "all_tps_info__2022-05-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e4284d472be83b4036b67f33f96733d0"}, "all_tps_info__2022-05-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6f7bc12ff0678098d374a8226b8cef89"}, "all_tps_info__2022-05-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1f9b0aba6b730a4a4c68643c56b8a43f"}, "all_tps_info__2022-05-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-315f7ead9b96d602a81fa538ce8f4f79"}, "all_tps_info__2022-05-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c555ce274ae4d2189b5e8cb0a382df3"}, "all_tps_info__2022-05-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3553d2eece41ef2b64fe87a73f829954"}, "all_tps_info__2022-05-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d680b6c982bee90d3d5570c3520292dd"}, "all_tps_info__2022-05-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3d6f7abaa188a4461ce9f7e24d632053"}, "all_tps_info__2022-05-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e085d5c8452e33d0b8265fecec952703"}, "all_tps_info__2022-05-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1670c26ef16a81246c326828fefb9dc5"}, "all_tps_info__2022-05-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2380fe14fa7c4709da7c0de0321498e3"}, "all_tps_info__2022-05-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-2772415eed2b4946733ebff439a35581"}, "all_tps_info__2022-05-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9412864906fdaf0e5a24feec59696587"}, "all_tps_info__2022-05-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-152b9a0d9b15766c01e4d996774fb181"}, "all_tps_info__2022-05-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1e1ac49bac4373dbb510e87430d7af98"}, "all_tps_info__2022-05-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ec691acff81d02450433bfd12b02e6e4"}, "all_tps_info__2022-05-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5aca5837982922d34d3d9d3d8d820668"}, "all_tps_info__2022-05-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-74713b404f85310b43aabbddcbf0a3e8"}, "all_tps_info__2022-05-31": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-05-31'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-33433a27e2b7ae5412d9a3b72634a1ff"}, "all_tps_info__2022-06-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-307f55aea3ef36283a965f641bd9bf0a"}, "all_tps_info__2022-06-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a7d126c7afd630e0ac29f01340f248d7"}, "all_tps_info__2022-06-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b5cefe27fc06a92ec6b816f0c1bb45e6"}, "all_tps_info__2022-06-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e74c2abad19de20c6db65e3af2b8dbca"}, "all_tps_info__2022-06-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-31aca6d0b1c714bf18344b841407a8a6"}, "all_tps_info__2022-06-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3e1899e5bdb292903deabc6bc250aa17"}, "all_tps_info__2022-06-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e50507df6109feb922106a8179198d78"}, "all_tps_info__2022-06-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-eb8b6caa562261521889a9e26f62db6b"}, "all_tps_info__2022-06-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b2adbf57cd1d079bd3742f1b45e00ced"}, "all_tps_info__2022-06-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-66ce008c3188ca608abfe0238118f7f7"}, "all_tps_info__2022-06-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1c492366de1f9762f9a6b0620e5b5b7a"}, "all_tps_info__2022-06-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e8c0c760cd7c69b1cf6c4256c2a0857e"}, "all_tps_info__2022-06-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-57c9b3c242ff07d51367e0c4c93a58e6"}, "all_tps_info__2022-06-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-ccd22216316b1c5e3e474327ba83599a"}, "all_tps_info__2022-06-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-8a8015a94104bc0f6e298316c21a8f4f"}, "all_tps_info__2022-06-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9aa6f677b553dfa658fae081abcd001f"}, "all_tps_info__2022-06-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-70ed4a1ed47db9043055f77858d36a2c"}, "all_tps_info__2022-06-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-7ea786ce45d27cfe9f9badd40fd7f710"}, "all_tps_info__2022-06-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5f7229bc905836e7b6601847984e1f21"}, "all_tps_info__2022-06-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bc4d2fc933e063449bccd4d6693c7148"}, "all_tps_info__2022-06-21": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-21'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-340d1e5e532aef840d26fb46b531d03b"}, "all_tps_info__2022-06-22": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-22'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-278e512a3dcf337cc92cfaf1945f6081"}, "all_tps_info__2022-06-23": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-23'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-27ee3cf4e5fd335d27232b34d81717c5"}, "all_tps_info__2022-06-24": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-24'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-e230dc1d052397c6d61b181bfd707802"}, "all_tps_info__2022-06-25": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-25'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-110961111f08b98c42422d4071ceec77"}, "all_tps_info__2022-06-26": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-26'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-282a44264013fcd2625e984d3713002f"}, "all_tps_info__2022-06-27": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-27'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-d4c41372ba06bae9fe2d9c1a95c79355"}, "all_tps_info__2022-06-28": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-28'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-30a4362c04aa9077d88317d7e5827530"}, "all_tps_info__2022-06-29": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-29'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-97f3a25f924c77e164ed487dbffe6a09"}, "all_tps_info__2022-06-30": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-06-30'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-1ecdc553af362422e31a8f5f250c138c"}, "all_tps_info__2022-07-01": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-01'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-c32364fad87c3363ea1134de67a3703d"}, "all_tps_info__2022-07-02": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-02'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-87fff29d5248238446f1cd9b13c43bb0"}, "all_tps_info__2022-07-03": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-03'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-b7ea66a92952da80a861e7e3a21052a9"}, "all_tps_info__2022-07-04": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-04'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-a0f101c77cc5a50abfea865a50100520"}, "all_tps_info__2022-07-05": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-05'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-55d0145246e758004cc52d28e8b09568"}, "all_tps_info__2022-07-06": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-06'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-36a228006285c2489213abb71e72a1d6"}, "all_tps_info__2022-07-07": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-07'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-762b1d9ee3f07f2361bf41d302629ba7"}, "all_tps_info__2022-07-08": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-08'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-585c61cbb14d13d9c942d1edd52339de"}, "all_tps_info__2022-07-09": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-09'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-3e0b74836ad986baee452c15a3e235a9"}, "all_tps_info__2022-07-10": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-10'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-5c45d2cf168da8e85f334f551ee84f72"}, "all_tps_info__2022-07-11": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-11'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-4bfe84b669b3ac7570a1345e929a2df0"}, "all_tps_info__2022-07-12": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-12'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6f713d77ea6f49906e31c0473a0bfa46"}, "all_tps_info__2022-07-13": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-13'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-bbdd1b18e09f3f00dc4fb02ff2650ebc"}, "all_tps_info__2022-07-14": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-14'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-29b1cc91266ecec7e02238dfe42c1304"}, "all_tps_info__2022-07-15": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-15'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-009d56d82a086e07a720b90e5712a251"}, "all_tps_info__2022-07-16": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-16'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9176982ee27469a8251b2b6beea5cac4"}, "all_tps_info__2022-07-17": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-17'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-9545e59f24b7eb3518b1d2b2a17b9774"}, "all_tps_info__2022-07-18": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-18'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-6ff379a4f34de011dff51762acc01e2a"}, "all_tps_info__2022-07-19": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-19'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-965db4863ea7ab5a1a961fe25cbe624a"}, "all_tps_info__2022-07-20": {"query": "\n--sql @name: all_tps_info@\n-- TODO: use Kida's regex?\nwith consumption_tx as (\n    select\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded,\n        sum(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int\n        ) as compute_units_used,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_requested,\n        avg(\n            split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [0] :: int / split(\n                regexp_substr(s.value, '[0-9]* of [0-9]*'),\n                ' of '\n            ) [1] :: int\n        ) as avg_compute_units_proportion\n    from\n        solana.core.fact_transactions t,\n        lateral flatten(input => t.log_messages) s\n    where\n        block_timestamp :: date = '2022-07-20'\n        and s.value like '% consumed %'\n    group by\n        t.block_timestamp,\n        t.tx_id,\n        t.fee,\n        t.succeeded\n)\nselect\n    date_trunc('hour', block_timestamp) as datetime,\n    -- total tx\n    count(tx_id) as total_tx,\n    sum(fee) as total_fee,\n    avg(fee) as avg_total_fee,\n    sum(compute_units_used) as total_compute_units_used,\n    avg(compute_units_used) as avg_compute_units_used,\n    avg(avg_compute_units_requested) as total_avg_compute_units_requested,\n    avg(avg_compute_units_proportion) as total_avg_compute_units_proportion,\n    -- successful tx:\n    count(\n        case\n            when succeeded = 'TRUE' then succeeded\n            else NULL\n        end\n    ) as successful_tx,\n    sum(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as successful_fee,\n    avg(\n        case\n            when succeeded = 'TRUE' then fee\n            else NULL\n        end\n    ) as avg_successful_fee,\n    sum(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then compute_units_used\n            else NULL\n        end\n    ) as avg_successful_compute_units_used,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_successful_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'TRUE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_successful_compute_units_proportion,\n    -- failed tx:\n    count(\n        case\n            when succeeded = 'FALSE' then succeeded\n            else NULL\n        end\n    ) as failed_tx,\n    sum(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as failed_fee,\n    avg(\n        case\n            when succeeded = 'FALSE' then fee\n            else NULL\n        end\n    ) as avg_failed_fee,\n    sum(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then compute_units_used\n            else NULL\n        end\n    ) as avg_failed_compute_units_used,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_requested\n            else NULL\n        end\n    ) as avg_failed_compute_units_requested,\n    avg(\n        case\n            when succeeded = 'FALSE' then avg_compute_units_proportion\n            else NULL\n        end\n    ) as avg_failed_compute_units_proportion,\n    -- rates:\n    successful_tx / total_tx as success_rate,\n    total_tx / 3600 as total_tps,\n    successful_tx / 3600 as succesful_tps,\n    failed_tx / 3600 as failed_tps\nfrom\n    consumption_tx\ngroup by\n    datetime\norder by\n    datetime \n--end-sql\n", "token": "queryRun-86d99c586b31d429723a5c60fad44259"}}